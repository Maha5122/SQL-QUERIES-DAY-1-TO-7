MAHALAKSHMI S
==============

29-08-2022
***********


DAY 8//ASSIGHNMENTS
===================
---COPY A FULL TABLE---


CREATE TABLE EMP
AS
SELECT * 
FROM HR.EMPLOYEES 

SELECT * FROM EMP

---COPY TABLE WITH SELECTED COLUMNS-----

CREATE TABLE EMP1
AS
SELECT FIRST_NAME,LAST_NAME,DEPARTMENT_ID,JOB_ID
FROM HR.EMPLOYEES

SELECT * FROM EMP1

----COPY A TABLE WITH SELECTED RECORDS---


CREATE TABLE EMP2
AS
SELECT *
FROM HR.EMPLOYEES
WHERE SALARY > 9000

SELECT * FROM EMP2


----COPY A TABLE WITH SELECTED RECORDS AND SELECTED COLUMNS---


CREATE TABLE EMP3
AS
SELECT FIRST_NAME,LAST_NAME,DEPARTMENT_ID,JOB_ID
FROM HR.EMPLOYEES
WHERE JOB_ID = 'AD_VP'

SELECT * FROM EMP3

------COPY A TABLE WITH ZERO RECORDS-----

CREATE TABLE EMP4
AS
SELECT *
FROM HR.EMPLOYEES
WHERE 0=3

SELECT * FROM EMP4


----CREATE OWN TABLES INSERT VALUES BY USING INSERTALL KEYWORD----

CREATE TABLE EMPLOYEE
(
ENAME VARCHAR(50),
EID NUMBER(2),
ESALARY NUMBER(5),
EPOSTING VARCHAR(40),
EHOUR NUMBER(2)
);


CREATE TABLE STUDENT
(
SNAME VARCHAR(50),
SREGNO NUMBER(2),
SMOBNUM NUMBER(5)
);

CREATE TABLE VEHICLE
(
VTYPE VARCHAR(50),
VID NUMBER(2),
VCOLOR VARCHAR(50),
VSPEED NUMBER(2),
VRATE NUMBER(2),
VSEATS NUMBER(2),
VQUALITY VARCHAR(30)
);

INSERT ALL
INTO EMPLOYEE VALUES('MAHALAKSHMI',51,50000,'DATA ANALYSIST',9)
INTO STUDENT VALUES('YAMINI',4,8897)
INTO VEHICLE VALUES('4WHEELER',67,'RED',90,5,8,'GOOD')
SELECT * FROM DUAL;

SELECT * FROM EMPLOYEE

SELECT * FROM STUDENT

SELECT * FROM VEHICLE



-----CREATE TABLE WITH EXISTING TABLE-----

CREATE TABLE EMP5
AS 
SELECT E.FIRST_NAME,E.SALARY,E.EMAIL,J.JOB_TITLE,D.DEPARTMENT_NAME
FROM HR.EMPLOYEES E,HR.DEPARTMENTS D,HR.JOBS J
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
AND E.JOB_ID = J.JOB_ID
AND E.SALARY BETWEEN 5000 AND 10000;

SELECT * FROM EMP5


MAHAALAKSHMI S
==============

30-08-2022
==========

DAY 9 \\ ASSIGNMENTS
====================


1. MANAGER ID WISE,NO OF EMPLOYEES & TOTAL SAALRY BUT DON'T CONSIDER IT PROGRAMMER
   
   
   SELECT COUNT(*),SUM(SALARY) 
   FROM HR.EMPLOYEES
   WHERE JOB_ID <> 'IT_PROG'
   GROUP BY MANAGER_ID
   
   
2. DEPARTMENT ID WISE,TOTAL SALATY AND AVERAGE SALARY BUT ONLY FOR THE DEPARTMENTS FROM 10 - 50

   SELECT SUM(SALARY),AVG(SALARY)
   FROM HR.EMPLOYEES
   WHERE DEPARTMENT_ID BETWEEN 10 AND 60
   GROUP BY DEPARTMENT_ID
   
3. WHAT IS THE DIFF B/W MAX SALARY & MIN SALARY IN THE COMPANY


  SELECT MAX(SALARY)-MIN(SALARY) "DIFFERENCE"
  FROM HR.EMPLOYEES
  
  
  
  SELECT DEPARTMENT_ID,MAX(SALARY)-MIN(SALARY) "DIFFERENCE"
  FROM HR.EMPLOYEES
  GROUP BY DEPARTMENT_ID


  
  MAHALAKSHMI S
==============

DAY 10 / ASSIGHNMENT
====================
1. MANAGER NAME WISE NO OF EMPLOYEES
 EXCLUDING EMPLOYEES WHO GETS SALARY LESS THAN 10000


SELECT E1.FIRST_NAME "MANAGER NAME",SUM(E1.SALARY) "TOTAL SALARY",COUNT(*) "NO OF EMPLOYEES"
FROM HR.EMPLOYEES E,HR.EMPLOYEES E1
WHERE E.EMPLOYEE_ID=E1.MANAGER_ID
GROUP BY E1.FIRST_NAME
HAVING SUM(E1.SALARY) < 10000


2. JOB TITLE WISE,DEPARTMENT NAME WISE,NO OF EMPLOYEES,AVERAGE SALARY

SELECT J.JOB_TITLE,D.DEPARTMENT_NAME,COUNT(*) "NO OF EMPLOYEES",AVG(SALARY) 
FROM HR.JOBS J,HR.DEPARTMENTS D,HR.EMPLOYEES E
WHERE E.JOB_ID = J.JOB_ID
AND E.DEPARTMENT_ID = D.DEPARTMENT_ID
GROUP BY J.JOB_TITLE,D.DEPARTMENT_NAME

3. JOB TITLE WISE,DEPARTMENT NAME WISE,NO OF EMPLOYEES,AVERAGE SALARY
   BUT THE AVERAGE SHOLUD BE IN THE RANGE OF 5000 TO 10000


SELECT J.JOB_TITLE,D.DEPARTMENT_NAME,COUNT(*) "NO OF EMPLOYEES",AVG(SALARY) 
FROM HR.JOBS J,HR.DEPARTMENTS D,HR.EMPLOYEES E
WHERE E.JOB_ID = J.JOB_ID
AND E.DEPARTMENT_ID = D.DEPARTMENT_ID
GROUP BY J.JOB_TITLE,D.DEPARTMENT_NAME
HAVING AVG(SALARY) BETWEEN 5000 AND 10000

4. IN WHICH DEPARTMENTS ATLEAST 2 EMPLOYEES ARE WORKING AND TOTAL SALARY IS GREATER THAN 20000

SELECT COUNT(*) "NO OF EMPLOYEES",SUM(SALARY) "TOTAL SALARY"
FROM HR.EMPLOYEES E,HR.DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
GROUP BY D.DEPARTMENT_NAME
HAVING COUNT(*)>=2
AND SUM(SALARY) > 20000

5. I WANT TO GET JOB TITLE LEVEL TOAL SALARY CONSIDER THE JOBS 
   IN WHICH ATLEAST 5 EMPLOYEES ARE WORKING EXCLUDING PROGRAMMERS
   

SELECT COUNT(*) "NO OF EMPLOYEES",SUM(SALARY) "TOTAL SALARY",J.JOB_TITLE
FROM HR.EMPLOYEES E,HR.JOBS J
WHERE E.JOB_ID = J.JOB_ID
AND J.JOB_TITLE <> 'Programmer'
GROUP BY J.JOB_TITLE 
HAVING COUNT(*)>=5
  

select * from hr.jobs



MAHALAKSHMI S
=============
DAY 11 ASSIGHNMENT
==================
DML STATEMENT
=============
MERGE
=====


CREATE TABLE STUDENT1
(
SNAME VARCHAR(50),
SREGNO NUMBER(2),
SMOBNO NUMBER(5)

);


CREATE TABLE STUDENT2
(
SNAME VARCHAR(50),
SREGNO NUMBER(2),
SMOBNUM NUMBER(5)
);

INSERT INTO STUDENT1 VALUES('MAHA',1,90876);
INSERT INTO STUDENT1 VALUES('AYESHA',2,90854);
INSERT INTO STUDENT1 VALUES('DIVYA',3,90853);

INSERT INTO STUDENT2 VALUES('SHRUTHI',1,90874);
INSERT INTO STUDENT2 VALUES('DEEPA',2,90870);
INSERT INTO STUDENT1 VALUES('MAHA',4,90887);
INSERT INTO STUDENT1 VALUES('MAHA',5,90800);

MERGE INTO STUDENT1 S1
USING STUDENT2 S2
ON (S1.SREGNO = S2.SREGNO)
WHEN MATCHED THEN
   UPDATE 
   SET
   S1.SNAME = S2.SNAME
WHEN NOT MATCHED THEN
   INSERT VALUES(S2.SNAME,S2.SREGNO,S2.SMOBNUM)
   
SELECT * FROM STUDENT1   
   

MAHALAKSHMI S
=============

DAY 12 ASSIGHNMENTS
===================

ORDER BY
========

COLUMN NAME WISE ORDER BY:
==========================

SELECT FIRST_NAME,SALARY,DEPARTMENT_ID,LAST_NAME
FROM HR.EMPLOYEES
ORDER BY DEPARTMENT_ID



MULTIPLE COLUMN NAME WISE ORDER BY:
==========================

SELECT FIRST_NAME,SALARY,DEPARTMENT_ID,LAST_NAME
FROM HR.EMPLOYEES
ORDER BY DEPARTMENT_ID,SALARY


MENSIONIG BY COLUMN NUMBERS:
============================

SELECT FIRST_NAME,SALARY,HIRE_DATE,JOB_ID
FROM HR.EMPLOYEES
ORDER BY JOB_ID, SALARY DESC


SELECT *
FROM HR.EMPLOYEES
ORDER BY SALARY ASC

USING FETCH:
============


SELECT *
FROM HR.EMPLOYEES
ORDER BY SALARY ASC
FETCH FIRST 10 ROWS ONLY

PRIMARY KEY & FOREIGN KEY:
===========================

CREATE TABLE STUDENT1
(
    SNAME VARCHAR2(40),
    SID NUMBER PRIMARY KEY,
    SAGE NUMBER(3)
); 

INSERT INTO STUDENT1 VALUES ('RASHIKSA',01,18);
INSERT INTO STUDENT1 VALUES ('DIVYA',02,18);
CREATE TABLE DEPARTMENT1
(
    DNAME VARCHAR2(40),
    SID NUMBER ,
    DID NUMBER(3),
    FOREIGN KEY(SID) REFERENCES STUDENT1(SID)
);     

INSERT INTO DEPARTMENT1 VALUES ('CSE',01,401);
INSERT INTO DEPARTMENT1 VALUES ('EEE',02,402);
INSERT INTO DEPARTMENT1 VALUES ('IT',03,401);

    


DAY 13 ASSIGNMENTS
==================



CREATE TABLE STUDENT
(
SNAME VARCHAR(50),
SREGNO NUMBER(2),
SMOBNUM NUMBER(5)
);



CREATE TABLE STUDENT1
(
SNAME VARCHAR(50),
SREGNO NUMBER(2),
SMOBNUM NUMBER(5)
);



INSERT ALL
INTO STUDENT VALUES('MMM',1,67890)
INTO STUDENT VALUES('NNN',2,6523)
INTO STUDENT VALUES('BBB',3,6733)

INTO STUDENT1 VALUES('UUU',1,6003)
INTO STUDENT1 VALUES('YYY',2,1123)
INTO STUDENT1 VALUES('DDD',2,6522)
SELECT * FROM DUAL;

UPDATE STUDENT1 
SET SREGNO = 8
WHERE SNAME = 'DDD' 

UNION ALL
=========

SELECT SNAME,SREGNO FROM STUDENT

UNION ALL

SELECT SNAME,SREGNO FROM STUDENT1


UNION 
======

SELECT SNAME,SREGNO FROM STUDENT

UNION 

SELECT SNAME,SREGNO FROM STUDENT1


INTERSECT
=========

SELECT SREGNO FROM STUDENT

INTERSECT

SELECT SREGNO FROM STUDENT1


MINUS
=========

SELECT SREGNO FROM STUDENT

MINUS

SELECT SREGNO FROM STUDENT1



SUB QUERY
========

SELECT DEPARTMENT_NAME FROM HR.DEPARTMENTS WHERE DEPARTMENT_ID = 
(SELECT DEPARTMENT_ID FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=101)


3 LEVEL SUB QUERY
==================

SELECT DEPARTMENT_NAME FROM HR.DEPARTMENTS WHERE DEPARTMENT_ID = 
 (SELECT DEPARTMENT_ID FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=
   (SELECT EMPLOYEE_ID FROM HR.EMPLOYEES WHERE FIRST_NAME = 'Neena')
  ) 
  
  
CORRELATED SUB QUERY :
======================

SELECT * FROM HR.DEPARTMENTS D
 WHERE 5 <= 
 (SELECT COUNT(*) FROM HR.EMPLOYEES E WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID)
 
 
SELECT * FROM HR.DEPARTMENTS D
 WHERE 5 <= 
 (SELECT COUNT(*) FROM HR.EMPLOYEES E WHERE E.DEPARTMENT_ID = 60)





MAHALAKSMI S
============

DAY 14 / ASSIGHNMENTS
**********************

1.  JOB TITLE WISE,CITY NAME,NO OF EMPLOYEES AND TOTAL SALARY
CONSIDER ONLY THE EMPLOYEES WHO GETS SALARY > 8000
SHOW ONLY IF NO OF EMPLOYEES >= 5
SHOW THE OUTPUT BASED ON TOTAL SALARY9TOP TO BOTTOM).

SELECT
    J.JOB_TITLE,
    L.CITY,
    COUNT(*) "NO OF EMPLOYEES",
    SUM(E.SALARY) "TOTAL SALARY"
FROM HR.EMPLOYEES E,
    HR.DEPARTMENTS D,
    HR.JOBS J,
    HR.LOCATIONS L
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID 
    AND E.JOB_ID = J.JOB_ID
    AND D.LOCATION_ID = L.LOCATION_ID
AND E.SALARY > 8000      
GROUP BY J.JOB_TITLE,L.CITY
HAVING COUNT(*) >= 5
ORDER BY SUM(E.SALARY) DESC


2.  EMPLOYEES WHO FALLS IN CATEGORY 1 BUT NOT IN CATEGORY 2
CATEGORY1: WITH SALARY > 8000,Programmer
CATEGORY2: HIRE DATE LATER THAN 2001 LIVES IN 'Seatle'.


SELECT E.*
FROM HR.EMPLOYEES E,
     HR.JOBS J
WHERE E.JOB_ID = J.JOB_ID
 AND E.SALARY > 8000
 AND JOB_TITLE = 'Programmer'
MINUS
SELECT E.*
FROM HR.EMPLOYEES E,
     HR.LOCATIONS L,
     HR.DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
 AND D.LOCATION_ID = L.LOCATION_ID
 AND E.HIRE_DATE > '01-JAN-2001'
 AND L.CITY = 'Seatle'

3.  LIST THE JOB TITLES IN WHICH ATLEAST FIVE EMPLOYEES ARE 
WORKING WITH AVERAGE SALARY > 7000


SELECT JOB_TITLE,AVG(E.SALARY),COUNT(*) "NO OF EMPLOYEES"  
FROM HR.EMPLOYEES E,HR.JOBS J
WHERE E.JOB_ID = J.JOB_ID
GROUP BY JOB_TITLE
HAVING COUNT(*) >= 5
AND AVG(E.SALARY) > 7000



4.  LIST THE JOB TITLE,IN WHICH ATLEAST FIVE EMPLOYEES ARE WORKING.
(USING CORRELATED SUB QUERY) 

SELECT J.JOB_TITLE FROM HR.JOBS J
WHERE 5 >=
 (SELECT COUNT(*) FROM HR.EMPLOYEES E WHERE E.JOB_ID = J.JOB_ID)
 
 
 
 VIEW
 ****
 
 CREATE VIEW EMP_CITY_NAME
 AS
 SELECT CITY FROM HR.LOCATIONS
 
 SELECT * FROM EMP_CITY_NAME


MAHALAKSHMI S
=============

DAY 15  / ASSIGNMENTS
**********************

INDEX
======

CREATE TABLE EMPLOYEE
(
ENAME VARCHAR(50),
EID NUMBER(2),
ESALARY NUMBER(5)
);

INSERT INTO EMPLOYEE VALUES('MAHALAKSHMI',51,50000)

CREATE INDEX EID ON EMPLOYEE(EID)


PSEUDO COLUMNS
===============

SELECT ROWNUM "S_NO",
       FIRST_NAME,
       JOB_ID,
       ROWID "ID FOR USER",
       USER "USER TYPE",
       SYSDATE "DATE"
FROM HR.EMPLOYEES
WHERE JOB_ID = 'IT_PROG'

SELECT * FROM HR.DEPARTMENTS

RANK
====

SELECT DEPARTMENT_ID,
       DEPARTMENT_NAME,
       MANAGER_ID,
       RANK()OVER(ORDER BY DEPARTMENT_ID DESC) "RANK"
FROM HR.DEPARTMENTS 

       

DENSE RANK
==========


SELECT FIRST_NAME,
       LAST_NAME,
       DEPARTMENT_ID,
       RANK()OVER(ORDER BY DEPARTMENT_ID DESC) "RANK",
       DENSE_RANK() OVER(ORDER BY  DEPARTMENT_ID DESC) "DENSE RANK"
FROM HR.EMPLOYEES 



DECODE
======


SELECT DEPARTMENT_NAME,
       DEPARTMENT_ID,
       DECODE(DEPARTMENT_NAME,'IT','INFORMATION TECHNOLOGY','NON INFORMATION TECHNOLGY') "DECODED"
FROM HR.DEPARTMENTS        



DAY 16 / ASSIGNMENT
====================

MAHALAKSHMI S
*************

DECODE
~~~~~~~

SELECT * FROM HR.EMPLOYEES
SELECT * FROM HR.DEPARTMENTS


SELECT FIRST_NAME,
       SALARY,
       JOB_ID,
       DECODE(JOB_ID,'FI_ACCOUNT','ACCOUNT JOB','NON ACCOUNTANT') "DECODE"
FROM HR.EMPLOYEES 

EXISTS
~~~~~~~

SELECT D.DEPARTMENT_NAME,D.DEPARTMENT_ID FROM HR.DEPARTMENTS D
WHERE EXISTS(SELECT E.DEPARTMENT_ID FROM HR.EMPLOYEES E
             WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID
             AND D.DEPARTMENT_NAME NOT LIKE 'S%')
             
             
NOT EXISTS
~~~~~~~~~~


SELECT D.MANAGER_ID,D.DEPARTMENT_ID FROM HR.DEPARTMENTS D
WHERE NOT EXISTS(SELECT E.DEPARTMENT_ID FROM HR.EMPLOYEES E
             WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID
             AND D.DEPARTMENT_NAME NOT LIKE 'S%')
             
CASE
~~~~

CREATE TABLE ACTRESS
(
 NAME VARCHAR2(50),
 PAID NUMBER
) 

INSERT INTO ACTRESS VALUES('VIJAY',50000);
INSERT INTO ACTRESS VALUES('AJITH',60000);

SELECT NAME,PAID
    CASE
       WHEN PAID > 50000 THEN 'HIGH',
       WHEN PAID <= 50000 THEN 'LOW'
    END "SALARY"
FROM ACTRESS  


 INSERT SELECT
 ~~~~~~~~~~~~~~
 
CREATE TABLE ACTORS
(
 NAME VARCHAR2(50),
 PAID NUMBER
)
INSERT INTO ACTORS
SELECT * FROM ACTRESS

SELECT * FROM ACTORS

NVL
~~~


CREATE TABLE STUDENT
(
SNAME VARCHAR(50),
SREGNO NUMBER(2),
SMOBNUM NUMBER(5)
);

INSERT INTO STUDENT VALUES('MMY',3,6794);
INSERT INTO STUDENT VALUES('MMH',3,NULL);
INSERT INTO STUDENT VALUES(NULL,3,6794);
 SELECT * FROM STUDENT
 
 SELECT SNAME,SMOBNUM,NVL(SMOBNUM,'567') "MOB NO" FROM STUDENT;
 


NVL2 & DEFAULT
~~~~~~~~~~~~~~

CREATE TABLE STUDENT
(
SNAME VARCHAR(50),
SREGNO varchar2(20) default 'PLEASE ENTER'
);

INSERT INTO STUDENT VALUES('MAHA','555MM');
INSERT INTO STUDENT VALUES('AYESHSA','555MM');
INSERT INTO STUDENT VALUES(NULL,'555MM');
INSERT INTO STUDENT VALUES('MAHA',NULL);
INSERT INTO STUDENT(SNAME) VALUES ('SURUTHI');
INSERT INTO STUDENT(SNAME) VALUES (NULL);



SELECT SNAME,SREGNO,NVL2(SNAME,'ASSINED','NOT ASSISNED') "RESULT"
FROM STUDENT

UPPER / LOWER
~~~~~~~~~~~~~~

SELECT SNAME,
       LOWER(SNAME) "Small",
       UPPER(SNAME) "CAPITAL"
    FROM STUDENT       




 
 
 
 
 
 
 
 
 

      